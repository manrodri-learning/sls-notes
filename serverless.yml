service: sls-notes-backend

frameworkVersion: "3"

plugins:
  - serverless-offline

custom:
  allowedHeaders: 
    - Acccept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name


provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  stage: PROD
  memorySize: 128
  timeout: 5
  endpointType: REGIONAL
  environment:
    NOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamedb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-west-1:*:table/${self.provider.environment.NOTES_TABLE}"


functions:
  add-note: 
    handler: API/add-note.handler
    description: POST /note
    events:
      - http:
          path: note
          method: post
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  update-note:
    handler: API/update-note.handler
    description: PATCH /notes
    events:
      - http:
          path: note
          method: patch
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-notes:
    handler: API/get-notes.handler
    description: GET /notes
    events:
      - http:
          path: notes
          method: get
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-note:
    handler: API/get-note.handler
    description: GET /note/n/{note_id}
    events:
      - http:
          path: note/n/{note_id}
          method: get
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  delete-note:
    handler: API/delte-note.handler
    description: DELETE /note/t/{timestamp}
    events:
      - http:
          path: note/t/{timestamp}
          method: delete
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}
resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete # Change to retain when moving to prod or qa stages
      Properties:
        TableName: ${self:service}-${self:provider.stage}-notes-table
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
          - AttributeName: note_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: note_id-index
            KeySchema:
              - AttributeName: note_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

  Outputs:
    NewOutput:
      Description: "Description for the output"
      Value: "Some output value"
